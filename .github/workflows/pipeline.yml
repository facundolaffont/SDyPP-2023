# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions 

name: tp2-ej1-actions
run-name: TP2 - EJ1 (@${{ github.triggering_actor }})

on:
  push:
    branches:
      - pipeline-actions

jobs:
  terraform-init: # INIT
    name: Terraform init
    if: contains(github.event.head_commit.message, 'INIT')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

      # Selecciona la rama para.
      - name: Checkout code 
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Crea la infraestructura en la nube.
      - name: Terraform init
        working-directory: tp02/ej1/servidor/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          ls -lah

          bucket_name="unlu-tf"

          prefix="gke/state"

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform validate

          terraform plan -lock=false

          terraform apply -lock=false --auto-approve
          
  k8s-deploy: # DEPLOY
    name: Kubernetes deployment
    if: contains(github.event.head_commit.message, 'DEPLOY')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

      # Checkout de la rama.
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura Google Cloud.
      - name: Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Google Cloud SDK setup
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          install_components: 'kubectl'
      - name: GCloud config
        run: |
          gcloud info

          gcloud components list

          gcloud container clusters get-credentials primary --region=us-central1-a
      
      # Despliega los objectos en la nube.
      - name: Deploy
        working-directory: tp02/ej1/servidor/k8s
        run: |
          ls -lah

          set -e

          kubectl create secret generic maestro-secrets \
          --from-literal=POSTGRES_URL=${{ secrets.POSTGRES_URL }} \
          --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

          kubectl create secret generic dns-secrets \
          --from-literal=CF_API_EMAIL=${{ secrets.CF_API_EMAIL }} \
          --from-literal=CF_API_KEY=${{ secrets.CF_API_KEY }}

          files=""
          for file in 0*.yaml; do
          files=$files" -f $(echo $file)"
          done
          eval "kubectl apply"$files
  
  dns-config: # DNS-UP
    name: DNS configuration
    if: contains(github.event.head_commit.message, 'DNS-UP')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

      # Checkout de la rama.
      - name: Checkout code
        uses: actions/checkout@v3

      # Checkout de la rama.
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura Google Cloud.
      - name: Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Google Cloud SDK setup
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          install_components: 'kubectl'
      - name: GCloud config
        run: |
          gcloud info

          gcloud components list

          gcloud container clusters get-credentials primary --region=us-central1-a
      
      # Instala y configura Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Configura los servidores de nombre de dominio.
      - name: DNS config
        working-directory: tp02/ej1/servidor/terraform/11-dns
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          CF_API_EMAIL: ${{ secrets.CF_API_EMAIL }}
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        run: |
          ls -lah

          bucket_name="unlu-tf"

          prefix="gke/state"

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform validate

          sudo apt-get install jq
          
          LOADBALANCER_IP=$(kubectl get -o json service maestro-service | jq .status.loadBalancer.ingress\[0\].ip)

          terraform plan \
          -var "TF_VAR_CLOUDFLARE_EMAIL=$CF_API_EMAIL" \
          -var "TF_VAR_CLOUDFLARE_API_KEY=$CF_API_KEY" \
          -var "TF_VAR_GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS" \
          -var "TF_VAR_LOADBALANCER_IP=$LOADBALANCER_IP" \
          -lock=false

          terraform apply -lock=false --auto-approve
  
  terraform-destroy: # DESTROY
    name: Terraform destroy
    if: contains(github.event.head_commit.message, 'DESTROY')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

      # Selecciona la rama para.
      - name: Checkout code 
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Crea la infraestructura en la nube.
      - name: Terraform destroy
        working-directory: tp02/ej1/servidor/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          ls -lah

          bucket_name="unlu-tf"

          prefix="gke/state"

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform destroy -lock=false --auto-approve