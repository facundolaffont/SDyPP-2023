# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions 

name: tp2-ej1-actions
run-name: TP2 - EJ1 (@${{ github.triggering_actor }})

on:
  push:
    branches:
      - pipeline-actions

jobs:
  terraform-init: # UP || INIT
    name: Terraform init
    if: startsWith(github.event.head_commit.message, 'UP') || startsWith(github.event.head_commit.message, 'INIT')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

    # Selecciona la rama para.
    - name: Checkout code 
      uses: actions/checkout@v3

    # Instala y configura Terraform CLI.
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Crea la infraestructura en la nube.
    - name: Terraform init
      working-directory: tp02/ej1/servidor/terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      run: |
        ls -lah

        bucket_name="unlu-tf"

        prefix="gke/state"

        terraform init --reconfigure \
        --backend-config bucket=$bucket_name \
        --backend-config prefix=$prefix

        terraform validate

        terraform plan -lock=false

        terraform apply -lock=false --auto-approve
          
  k8s-deploy: # UP || DEPLOY
    name: Kubernetes deployment
    if: startsWith(github.event.head_commit.message, 'UP') || startsWith(github.event.head_commit.message, 'DEPLOY')
    needs: terraform-init   
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

    # Checkout de la rama.
    - name: Checkout code
      uses: actions/checkout@v3

    # Configura Google Cloud.
    - name: Google Cloud authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
    - name: Google Cloud SDK setup
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '>= 363.0.0'
        install_components: 'kubectl'
    - name: GCloud config
      run: |
        gcloud info

        gcloud components list

        gcloud container clusters get-credentials primary --region=us-central1-a
    
    # Despliega los objectos en la nube.
    - name: Deploy
      working-directory: tp02/ej1/servidor/k8s
      run: |
        ls -lah

        set -e

        kubectl create secret generic maestro-secrets \
        --from-literal=POSTGRES_URL=${{ secrets.POSTGRES_URL }} \
        --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
        --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

        kubectl create secret generic dns-secrets \
        --from-literal=CF_API_EMAIL=${{ secrets.CF_API_EMAIL }} \
        --from-literal=CF_API_KEY=${{ secrets.CF_API_KEY }}

        files=""
        for file in 0*.yaml; do
        files=$files" -f $(echo $file)"
        done
        eval "kubectl apply"$files
  
  dns-config: # UP || DNS
    name: DNS configuration
    if: startsWith(github.event.head_commit.message, 'UP') || startsWith(github.event.head_commit.message, 'DNS')
    # needs: k8s-deploy
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

    # Checkout de la rama.
    - name: Checkout code
      uses: actions/checkout@v3

    # Configura Google Cloud.
    - name: Google Cloud authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
    - name: Google Cloud SDK setup
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '>= 363.0.0'
        install_components: 'kubectl'
    - name: GCloud config
      run: |
        gcloud info

        gcloud components list

        gcloud container clusters get-credentials primary --region=us-central1-a
    
    # Instala y configura Terraform CLI.
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Configura los servidores de nombre de dominio.
    - name: DNS config
      working-directory: tp02/ej1/servidor/terraform/11-dns
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        CF_API_EMAIL: ${{ secrets.CF_API_EMAIL }}
        CF_API_KEY: ${{ secrets.CF_API_KEY }}
      run: |
        ls -lah

        bucket_name="unlu-tf"

        prefix="gke-dns/state"

        terraform init --reconfigure \
        --backend-config bucket=$bucket_name \
        --backend-config prefix=$prefix

        terraform validate

        sudo apt-get install jq
        
        LOADBALANCER_IP=$(kubectl get -o json service maestro-service | jq -r .status.loadBalancer.ingress\[0\].ip)

        export TF_VAR_CLOUDFLARE_EMAIL=$CF_API_EMAIL
        export TF_VAR_CLOUDFLARE_API_KEY=$CF_API_KEY
        export TF_VAR_GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS
        export TF_VAR_LOADBALANCER_IP=$LOADBALANCER_IP

        terraform plan -lock=false

        terraform apply -lock=false --auto-approve
  
  k8s-destroy: # K8S-CLEAN
    name: Kubernetes object cleanning
    if: startsWith(github.evet.head_commit.message, 'K8S-CLEAN')    
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

    # Checkout de la rama.
    - name: Checkout code
      uses: actions/checkout@v3

    # Configura Google Cloud.
    - name: Google Cloud authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
    - name: Google Cloud SDK setup
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '>= 363.0.0'
        install_components: 'kubectl'
    - name: GCloud config
      run: |
        gcloud info

        gcloud components list

        gcloud container clusters get-credentials primary --region=us-central1-a
    
    # Limpia la nube de los objetos Kubernetes personalizados.
    - name: Clean
      working-directory: tp02/ej1/servidor/k8s
      run: |
        ls -lah

        set -e

        files=""
        for file in 0*.yaml; do
        files=$files" -f $(echo $file)"
        done
        eval "kubectl delete"$files

  terraform-destroy-dns: # DESTROY-ALL || DESTROY-DNS
    name: Terraform destroy DNS
    if: startsWith(github.event.head_commit.message, 'DESTROY-ALL') || startsWith(github.event.head_commit.message, 'DESTROY-DNS')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      CF_API_EMAIL: ${{ secrets.CF_API_EMAIL }}
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
    steps:

      # Selecciona la rama para.
      - name: Checkout code 
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Configura Google Cloud.
      - name: Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Google Cloud SDK setup
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          install_components: 'kubectl'
      - name: GCloud config
        run: |
          gcloud info

          gcloud components list

          gcloud container clusters get-credentials primary --region=us-central1-a

      # Crea la infraestructura en la nube.
      - name: Terraform destroy gke-dns/state
        working-directory: tp02/ej1/servidor/terraform/11-dns
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          ls -lah

          bucket_name="unlu-tf"

          prefix="gke-dns/state"

          sudo apt-get install jq
        
          LOADBALANCER_IP=$(kubectl get -o json service maestro-service | jq -r .status.loadBalancer.ingress\[0\].ip)

          export TF_VAR_CLOUDFLARE_EMAIL=$CF_API_EMAIL
          export TF_VAR_CLOUDFLARE_API_KEY=$CF_API_KEY
          export TF_VAR_GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS
          export TF_VAR_LOADBALANCER_IP=$LOADBALANCER_IP

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform destroy -lock=false --auto-approve

  terraform-destroy-base: # DESTROY-ALL || DESTROY-BASE
    name: Terraform destroy base
    if: startsWith(github.event.head_commit.message, 'DESTROY-ALL') || startsWith(github.event.head_commit.message, 'DESTROY-BASE')
    runs-on: ubuntu-latest
    environment: pipeline-actions
    steps:

      # Selecciona la rama para.
      - name: Checkout code 
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Crea la infraestructura en la nube.
      - name: Terraform destroy gke-dns/state
        working-directory: tp02/ej1/servidor/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          ls -lah

          bucket_name="unlu-tf"

          prefix="gke/state"

          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix

          terraform destroy -lock=false --auto-approve