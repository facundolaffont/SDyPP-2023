name: tp2-ej1-maestro-pipeline

on:
  issues:
    types: [opened]

# env:
#   TERRAFORM_INIT_ISSUE_TITLE: 'Terraform init'

jobs:
  setup:
    if: ${{ contains(github.event.issue.title, 'Terraform init') }}
    outputs:
      env-name: ${{ steps.env-name.outputs.env }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment name
        id: env-name
        run: echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT

  terraform-install:
    if: ${{ contains(github.event.issue.title, 'Terraform init') }}
    needs: [setup] 
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup.outputs.env-name }}
    env:
      name: ${{ needs.setup.outputs.env-name }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI para ser utilizado con un proveedor de servicios en la nube.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Inicializa un nuevo o existente directorio de trabajo.
      - name: Terraform init
        working-directory: tp02/ej1/maestro/terraform
        run: |
          ls -lah
          bucket_name="unlu-tf"
          prefix="gke/state"
          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix
          terraform validate
          # terraform plan -lock=false
          # terraform apply -lock=false --auto-approve
          terraform destroy -lock=false --auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

  terraform-destroy:
    if: ${{ contains(github.event.issue.title, 'Terraform destroy') }}
    needs: [setup] 
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup.outputs.env-name }}
    env:
      name: ${{ needs.setup.outputs.env-name }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Instala y configura Terraform CLI para ser utilizado con un proveedor de servicios en la nube.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Inicializa un nuevo o existente directorio de trabajo.
      - name: Terraform destroy
        working-directory: tp02/ej1/maestro/terraform
        run: |
          ls -lah
          bucket_name="unlu-tf"
          prefix="gke/state"
          terraform init --reconfigure \
          --backend-config bucket=$bucket_name \
          --backend-config prefix=$prefix
          terraform validate
          terraform destroy -lock=false --auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          
  # K8sDeploy:
  #   needs: [terraform-install]  
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: ${{ needs.setup.outputs.env-name }} 
  #   env:
  #     name: ${{ needs.setup.outputs.env-name }}
  #     GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  #   steps:
  #     # Checkout.
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Instalaci√≥n de kubernetes CLI.
  #     - name: Install kubectl
  #       run: |
  #         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  #         sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  #         kubectl version --client
